{"version":3,"sources":["lib/convertTimeObj.ts","components/TimeSpanPicker.tsx","components/DatePickerInput.tsx","components/AppSettings.tsx","components/Time.tsx","lib/timeFormatter.ts","hooks/useInterval.ts","components/InfoText.tsx","components/Countdown.tsx","constants/intervalRefreshRate.ts","components/CountToDate.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["convertToTimeObj","dateMillis","seconds","Math","floor","minutes","hours","days","formDefinition","id","label","TimeSpanPicker","countdownTime","setCountdownTime","useState","timeObj","toString","convertToStrTimeObj","inputState","setInputState","onChange","event","target","value","prevStates","prevValue","test","onBlur","strTimeObj","parseInt","convertToDateMillis","className","map","elem","key","htmlFor","type","name","DatePickerInput","onClick","AppSettings","finishDate","setFinishDate","setAppState","infoText","setInfoText","selected","date","shouldCloseOnSelect","showTimeSelect","timeIntervals","dateFormat","customInput","Time","timeFormatter","time","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","InfoText","strings","split","str","Countdown","remainingTime","setRemainingTime","endTime","setEndTime","setDelay","startEnabled","setStartEnabled","stopEnabled","setStopEnabled","stopCountdown","currentTime","Date","now","disabled","CountToDate","deltaTime","setDeltaTime","difference","valueOf","toLocaleString","App","appState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d87a08c9.chunk.js","sourcesContent":["import StrTimeObj from \"../types/StrTimeObj\";\nimport DateMillis from \"../types/DateMillis\";\nimport TimeObj from \"../types/TimeObj\";\n\nfunction convertToTimeObj(dateMillis: DateMillis): TimeObj {\n    const seconds = Math.floor(dateMillis / 1000) % 60;\n    const minutes = Math.floor(dateMillis / (60 * 1000)) % 60;\n    const hours = Math.floor(dateMillis / (60 * 60 * 1000)) % 24;\n    const days = Math.floor(dateMillis / (24 * 60 * 60 * 1000));\n\n    return { seconds, minutes, hours, days };\n}\n\nfunction convertToStrTimeObj(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: timeObj.seconds.toString(),\n        minutes: timeObj.minutes.toString(),\n        hours: timeObj.hours.toString(),\n        days: timeObj.days.toString()\n    };\n}\n\nfunction convertToDateMillis(strTimeObj: StrTimeObj): DateMillis {\n    const seconds = parseInt(strTimeObj.seconds) || 0;\n    const minutes = parseInt(strTimeObj.minutes) || 0;\n    const hours = parseInt(strTimeObj.hours) || 0;\n    const days = parseInt(strTimeObj.days) || 0;\n\n    return (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000;\n}\n\nexport {\n    convertToStrTimeObj,\n    convertToTimeObj,\n    convertToDateMillis,\n};\n","import React, { useState } from \"react\";\n\nimport './TimeSpanPicker.css';\nimport './DatePickerInput.css';\nimport StrTimeObj from \"../types/StrTimeObj\";\nimport { convertToDateMillis, convertToStrTimeObj } from \"../lib/convertTimeObj\";\nimport DateMillis from \"../types/DateMillis\";\n\ntype FormElement = {\n    id: keyof StrTimeObj;\n    label: string;\n}\n\nconst formDefinition: FormElement[] = [\n    {\n        id: 'seconds',\n        label: 'Seconds:'\n    },\n    {\n        id: 'minutes',\n        label: 'Minutes:'\n    },\n    {\n        id: 'hours',\n        label: 'Hours:'\n    },\n    {\n        id: 'days',\n        label: 'Days:'\n    }\n];\n\ninterface Props {\n    countdownTime: DateMillis;\n    setCountdownTime: (dateMillis: DateMillis) => void;\n}\n\nexport default function TimeSpanPicker({ countdownTime, setCountdownTime }: Props) {\n    const [inputState, setInputState] = useState<StrTimeObj>(convertToStrTimeObj(countdownTime));\n\n    function onChange(event: React.FocusEvent<HTMLInputElement>) {\n        const { value, id } = event.target;\n\n        setInputState(prevStates => {\n            const prevValue = prevStates[id as keyof StrTimeObj];\n            return {\n                ...prevStates,\n                [id]: /^[0-9]*$/.test(value) ? value : prevValue,\n            }\n        });\n    }\n\n    function onBlur() {\n        setCountdownTime(convertToDateMillis(inputState));\n    }\n\n    return (\n        <form className=\"form\">\n            {formDefinition.map(elem => (\n                <div key={elem.id}>\n                    <label htmlFor={elem.id}>{elem.label}</label>\n                    <input className=\"input\"\n                           type={elem.id}\n                           id={elem.id}\n                           name={elem.id}\n                           value={inputState[elem.id]}\n                           onChange={onChange}\n                           onBlur={onBlur}\n                    />\n                </div>\n            ))}\n        </form>\n    );\n}\n","import React from \"react\";\n\nimport './DatePickerInput.css';\n\ninterface Props {\n    value: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport default function DatePickerInput({ value, onClick }: Props) {\n    return <button className=\"input\" onClick={onClick}>{value}</button>\n}\n","import React from \"react\";\nimport DatePicker from 'react-datepicker';\n\nimport './AppSettings.css';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport AppState from \"../types/AppState\";\nimport TimeSpanPicker from \"./TimeSpanPicker\";\nimport DateMillis from \"../types/DateMillis\";\nimport DatePickerInput from \"./DatePickerInput\";\n\ninterface Props {\n    finishDate: Date;\n    setFinishDate: (newDate: Date) => void;\n    countdownTime: DateMillis;\n    setCountdownTime: (newTime: DateMillis) => void;\n    setAppState: (newState: AppState) => void;\n    infoText: string;\n    setInfoText: (newText: string) => void;\n}\n\nexport default function AppSettings(\n    { finishDate, countdownTime, setFinishDate, setCountdownTime, setAppState, infoText, setInfoText }: Props\n) {\n    function startCountToDate() {\n        setAppState('countToDate');\n    }\n\n    function startCountdown() {\n        setAppState('countdown');\n    }\n\n    // noinspection RequiredAttributes\n    return (\n        <div className=\"container\">\n            <div>\n                <h2>Count to datetime</h2>\n                <div>\n                    <DatePicker\n                        selected={finishDate}\n                        onChange={date => setFinishDate(date ? date : finishDate)}\n                        shouldCloseOnSelect={false}\n                        showTimeSelect={true}\n                        timeIntervals={5}\n                        dateFormat=\"yyyy MMMM d, HH:mm\"\n                        // @ts-ignore\n                        customInput={<DatePickerInput />}\n                    />\n                </div>\n                <button onClick={startCountToDate}>Start</button>\n            </div>\n            <div>\n                <h2>Countdown</h2>\n                <div>\n                    <TimeSpanPicker countdownTime={countdownTime} setCountdownTime={setCountdownTime}/>\n                </div>\n                <button onClick={startCountdown}>Start</button>\n            </div>\n            <div>\n                <h2>Custom Text</h2>\n                <div>\n                    <textarea className=\"textarea\"\n                              value={infoText}\n                              onChange={event => setInfoText(event.target.value)}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport timeFormatter from \"../lib/timeFormatter\";\nimport './Time.css';\nimport DateMillis from \"../types/DateMillis\";\n\ninterface Props {\n    time: DateMillis;\n}\n\nexport default function Time({ time }: Props) {\n    const strTimeObj = timeFormatter(time);\n    return (\n        <div className=\"clock\">\n            <div>\n                <span>{strTimeObj.days}</span>\n                <span>Days</span>\n            </div>\n            <div>\n                <span>{strTimeObj.hours}</span>\n                <span>Hours</span>\n            </div>\n            <div>\n                <span>{strTimeObj.minutes}</span>\n                <span>Minutes</span>\n            </div>\n            <div>\n                <span>{strTimeObj.seconds}</span>\n                <span>Seconds</span>\n            </div>\n        </div>\n    );\n}\n","import DateMillis from \"../types/DateMillis\";\nimport StrTimeObj from \"../types/StrTimeObj\";\nimport { convertToTimeObj } from \"./convertTimeObj\";\n\nexport default function timeFormatter(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: (timeObj.seconds < 10 ? '0' : '') + timeObj.seconds.toString(),\n        minutes: (timeObj.minutes < 10 ? '0' : '') + timeObj.minutes.toString(),\n        hours: (timeObj.hours < 10 ? '0' : '') + timeObj.hours.toString(),\n        days: (timeObj.days < 10 ? '0' : '') + timeObj.days.toString()\n    };\n}\n","// many thanks to overreacted:\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number | null) {\n    const savedCallback = useRef<() => void>();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current?.();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React from \"react\";\nimport './InfoText.css';\n\ninterface Props {\n    infoText: string;\n}\n\nexport default function InfoText({ infoText }: Props) {\n    const strings = infoText.split('\\n');\n\n    return (\n        <>\n            {strings.map(str => <h2 key={str} className=\"infotext\">{ str }</h2>)}\n        </>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport './Countdown.css';\nimport Time from \"./Time\";\nimport DateMillis from \"../types/DateMillis\";\nimport useInterval from \"../hooks/useInterval\";\nimport intervalRefreshRate from \"../constants/intervalRefreshRate\";\nimport InfoText from \"./InfoText\";\n\nconst defaultInfoText = 'Time until finish:'\n\ninterface Props {\n    countdownTime: DateMillis;\n    infoText?: string;\n}\n\nexport default function Countdown({ countdownTime, infoText }: Props) {\n    // time handling\n    const [remainingTime, setRemainingTime] = useState<DateMillis>(countdownTime);\n    const [endTime, setEndTime] = useState<DateMillis>(0);\n    // delay to update interval\n    const [delay, setDelay] = useState<number | null>(null);\n    // button states\n    const [startEnabled, setStartEnabled] = useState<boolean>(true);\n    const [stopEnabled, setStopEnabled] = useState<boolean>(false);\n\n    function updateRemainingTime() {\n        const currentTime = Date.now();\n        setRemainingTime(endTime - currentTime > 0 ?\n            endTime - currentTime :\n            0\n        );\n    }\n\n    // disable interval on finish\n    useEffect(() => {\n        if (remainingTime <= 0) setDelay(null);\n    }, [remainingTime]);\n\n    // set button states based on delay\n    useEffect(() => {\n        if (delay) {\n            setStartEnabled(false);\n            setStopEnabled(true);\n        } else {\n            setStartEnabled(true);\n            setStopEnabled(false);\n        }\n    }, [delay]);\n\n    // calculate remaining time every delay if delay is not null\n    useInterval(updateRemainingTime, delay);\n\n    function startCountdown() {\n        setEndTime(Date.now() + remainingTime);\n        setDelay(intervalRefreshRate);\n    }\n\n    function stopCountdown() {\n        setDelay(null);\n    }\n\n    function resetCountdown() {\n        setRemainingTime(() => {\n            stopCountdown();\n            return countdownTime;\n        });\n    }\n\n    return (\n        <>\n            <InfoText infoText={infoText ? infoText : defaultInfoText} />\n            <Time time={remainingTime} />\n            <div className=\"buttonbar\">\n                <button onClick={startCountdown} disabled={!startEnabled}>Start</button>\n                <button onClick={stopCountdown} disabled={!stopEnabled}>Stop</button>\n                <button onClick={resetCountdown}>Reset</button>\n            </div>\n        </>\n    );\n}\n","const intervalRefreshRate = 200; /* ms */\n\nexport default intervalRefreshRate;\n","import React, { useState } from \"react\";\nimport DateMillis from \"../types/DateMillis\";\nimport Time from \"./Time\";\nimport useInterval from \"../hooks/useInterval\";\nimport intervalRefreshRate from \"../constants/intervalRefreshRate\";\nimport InfoText from \"./InfoText\";\n\ninterface Props {\n    finishDate: Date;\n    infoText?: string;\n}\n\nexport default function CountToDate({ finishDate, infoText }: Props) {\n    const [deltaTime, setDeltaTime] = useState<DateMillis>(0);\n\n    useInterval(() => {\n        const difference = finishDate.valueOf() - Date.now().valueOf();\n        setDeltaTime(difference > 0 ? difference : 0);\n    }, intervalRefreshRate);\n\n    return (\n        <>\n            <InfoText infoText={(infoText ? infoText + '\\n' : '') + 'Date: ' + finishDate.toLocaleString()} />\n            <Time time={deltaTime} />\n        </>\n    );\n}","import React, { useState } from 'react';\n\nimport './App.css';\nimport DateMillis from \"../types/DateMillis\";\nimport AppSettings from './AppSettings';\nimport Countdown from \"./Countdown\";\nimport CountToDate from \"./CountToDate\";\nimport AppState from \"../types/AppState\";\n\nconst defaultInfoText = 'Aerospace Technology';\n\nfunction App() {\n    // global app state\n    const [appState, setAppState] = useState<AppState>('none');\n    // states for the different modes\n    const [finishDate, setFinishDate] = useState<Date>(new Date());\n    const [countdownTime, setCountdownTime] = useState<DateMillis>(15 * 60 * 1000);\n    const [infoText, setInfoText] = useState<string>(defaultInfoText);\n\n    function backToSettings() {\n        setAppState('none');\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {appState === 'none' && <AppSettings\n                    finishDate={finishDate}\n                    countdownTime={countdownTime}\n                    setFinishDate={setFinishDate}\n                    setCountdownTime={setCountdownTime}\n                    setAppState={setAppState}\n                    infoText={infoText}\n                    setInfoText={setInfoText}\n                />}\n\n                {appState === 'countdown' && <Countdown\n                    countdownTime={countdownTime}\n                    infoText={infoText}\n                />}\n                {appState === 'countToDate' && <CountToDate\n                    finishDate={finishDate}\n                    infoText={infoText}\n                />}\n\n                {appState !== 'none' && <button\n                    className=\"back\"\n                    onClick={backToSettings}\n                >\n                    Back\n                </button>}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}