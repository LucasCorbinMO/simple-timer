{"version":3,"sources":["lib/convertTimeObj.ts","components/AppSettings/TimeSpanPicker/TimeSpanPicker.tsx","components/AppSettings/DatePickerInput/DatePickerInput.tsx","components/AppSettings/AppSettings.tsx","components/Time.tsx","lib/timeFormatter.ts","hooks/useInterval.ts","components/Countdown/InfoText/InfoText.tsx","components/Countdown/Countdown.tsx","constants/intervalRefreshRate.ts","components/CountToDate.tsx","hooks/useStoredState.ts","lib/serialize-date.ts","components/App.tsx","hooks/useStoredDateState.ts","serviceWorker.ts","index.tsx"],"names":["convertToTimeObj","dateMillis","seconds","Math","floor","minutes","hours","days","formDefinition","id","label","TimeSpanPicker","countdownTime","setCountdownTime","useState","timeObj","toString","convertToStrTimeObj","inputState","setInputState","onChange","event","target","value","prevStates","prevValue","test","onBlur","strTimeObj","parseInt","convertToDateMillis","className","map","elem","key","htmlFor","type","name","DatePickerInput","onClick","AppSettings","finishDate","setFinishDate","setAppState","infoText","setInfoText","setImage","image","text","useRef","icon","faParagraph","html","current","tagName","faImage","selectedFile","files","reader","FileReader","onload","result","dataURI","title","readAsDataURL","faFolderOpen","console","log","faCalendar","selected","date","shouldCloseOnSelect","showTimeSelect","timeIntervals","dateFormat","customInput","faPlaneDeparture","faHourglassStart","faRocket","Time","timeFormatter","time","useInterval","callback","delay","savedCallback","useEffect","setInterval","clearInterval","InfoText","small","editable","disabled","Countdown","remainingTime","setRemainingTime","endTime","setEndTime","setDelay","startEnabled","setStartEnabled","stopEnabled","setStopEnabled","stopCountdown","currentTime","Date","now","faUndo","faPause","faPlay","CountToDate","deltaTime","setDeltaTime","difference","valueOf","toLocaleString","useStoredState","defaultValue","storedValue","window","localStorage","getItem","initialValue","JSON","stringify","parse","setValue","newValue","setItem","args","serializeDate","toISOString","App","appState","useStoredDateState","faStopwatch","src","alt","faChevronLeft","href","rel","faGithub","faGlobe","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56009b43.chunk.js","sourcesContent":["import StrTimeObj from \"../types/StrTimeObj\";\nimport DateMillis from \"../types/DateMillis\";\nimport TimeObj from \"../types/TimeObj\";\n\nfunction convertToTimeObj(dateMillis: DateMillis): TimeObj {\n    const seconds = Math.floor(dateMillis / 1000) % 60;\n    const minutes = Math.floor(dateMillis / (60 * 1000)) % 60;\n    const hours = Math.floor(dateMillis / (60 * 60 * 1000)) % 24;\n    const days = Math.floor(dateMillis / (24 * 60 * 60 * 1000));\n\n    return { seconds, minutes, hours, days };\n}\n\nfunction convertToStrTimeObj(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: timeObj.seconds.toString(),\n        minutes: timeObj.minutes.toString(),\n        hours: timeObj.hours.toString(),\n        days: timeObj.days.toString()\n    };\n}\n\nfunction convertToDateMillis(strTimeObj: StrTimeObj): DateMillis {\n    const seconds = parseInt(strTimeObj.seconds) || 0;\n    const minutes = parseInt(strTimeObj.minutes) || 0;\n    const hours = parseInt(strTimeObj.hours) || 0;\n    const days = parseInt(strTimeObj.days) || 0;\n\n    return (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000;\n}\n\nexport {\n    convertToStrTimeObj,\n    convertToTimeObj,\n    convertToDateMillis,\n};\n","import React, { useState } from \"react\";\n\nimport './TimeSpanPicker.css';\nimport '../DatePickerInput/DatePickerInput.css';\nimport StrTimeObj from \"../../../types/StrTimeObj\";\nimport { convertToDateMillis, convertToStrTimeObj } from \"../../../lib/convertTimeObj\";\nimport DateMillis from \"../../../types/DateMillis\";\n\ntype FormElement = {\n    id: keyof StrTimeObj;\n    label: string;\n}\n\nconst formDefinition: FormElement[] = [\n    {\n        id: 'days',\n        label: 'Days:'\n    },\n    {\n        id: 'hours',\n        label: 'Hours:'\n    },\n    {\n        id: 'minutes',\n        label: 'Minutes:'\n    },\n    {\n        id: 'seconds',\n        label: 'Seconds:'\n    }\n];\n\ninterface Props {\n    countdownTime: DateMillis;\n    setCountdownTime: (dateMillis: DateMillis) => void;\n}\n\nexport default function TimeSpanPicker({ countdownTime, setCountdownTime }: Props) {\n    const [inputState, setInputState] = useState<StrTimeObj>(convertToStrTimeObj(countdownTime));\n\n    function onChange(event: React.FocusEvent<HTMLInputElement>) {\n        const { value, id } = event.target;\n\n        setInputState(prevStates => {\n            const prevValue = prevStates[id as keyof StrTimeObj];\n            return {\n                ...prevStates,\n                [id]: /^[0-9]*$/.test(value) ? value : prevValue,\n            }\n        });\n    }\n\n    function onBlur() {\n        setCountdownTime(convertToDateMillis(inputState));\n    }\n\n    return (\n        <form className=\"form\">\n            {formDefinition.map(elem => (\n                <div key={elem.id}>\n                    <label htmlFor={elem.id}>{elem.label}</label>\n                    <input className=\"input\"\n                           type=\"number\"\n                           id={elem.id}\n                           name={elem.id}\n                           value={inputState[elem.id]}\n                           onChange={onChange}\n                           onBlur={onBlur}\n                    />\n                </div>\n            ))}\n        </form>\n    );\n}\n","import React from \"react\";\n\nimport './DatePickerInput.css';\n\ninterface Props {\n    value: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport default function DatePickerInput({ value, onClick }: Props) {\n    return <button className=\"input\" onClick={onClick}>{value}</button>\n}\n","import React, {useRef} from \"react\";\nimport DatePicker from 'react-datepicker';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faParagraph,\n    faCalendar,\n    faHourglassStart,\n    faPlaneDeparture,\n    faRocket, faImage, faFolderOpen\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport './AppSettings.css';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport AppState from \"../../types/AppState\";\nimport TimeSpanPicker from \"./TimeSpanPicker/TimeSpanPicker\";\nimport DateMillis from \"../../types/DateMillis\";\nimport DatePickerInput from \"./DatePickerInput/DatePickerInput\";\nimport ContentEditable from \"react-contenteditable\";\nimport FileObj from \"../../types/FileObj\";\n\ninterface Props {\n    finishDate: Date;\n    setFinishDate: (newDate: Date) => void;\n    countdownTime: DateMillis;\n    setCountdownTime: (newTime: DateMillis) => void;\n    setAppState: (newState: AppState) => void;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n    setImage: (newImage: FileObj | null) => void;\n    image: FileObj | null;\n}\n\nexport default function AppSettings(\n    {finishDate, countdownTime, setFinishDate, setCountdownTime, setAppState, infoText, setInfoText, setImage, image}: Props\n) {\n    const text = useRef<string>(infoText || '');\n\n    function startCountToDate() {\n        setAppState('countToDate');\n    }\n\n    function startCountdown() {\n        setAppState('countdown');\n    }\n\n    function onFileSelected(event: React.ChangeEvent<HTMLInputElement>) {\n        const selectedFile = (event.target.files || [])[0];\n        const reader = new FileReader();\n\n        // register setImage\n        reader.onload = event => {\n            event && event.target && event.target.result && setImage({\n                dataURI: event.target.result.toString(),\n                title: selectedFile.name\n            });\n        };\n\n        reader.readAsDataURL(selectedFile);\n    }\n\n    function clearFile() {\n        console.log('Clear image');\n        setImage(null);\n    }\n\n    // noinspection RequiredAttributes\n    return (\n        <div className=\"container\">\n            <div>\n                <h2><FontAwesomeIcon icon={faParagraph}/> Title</h2>\n                <div>\n                    <ContentEditable className=\"textarea\"\n                                     html={text.current}\n                                     onChange={event => text.current = event.target.value}\n                                     onBlur={() => setInfoText && setInfoText(text.current)}\n                                     tagName=\"div\"\n                    />\n                </div>\n            </div>\n\n            <div>\n                <h2><FontAwesomeIcon icon={faImage}/> Image</h2>\n                <div>\n                    <input id=\"inputImage\" type=\"file\" onChange={onFileSelected}/>\n                    <label className=\"textarea\" htmlFor=\"inputImage\">\n                        <FontAwesomeIcon icon={faFolderOpen}/> Select file ({image ? image.title : 'none selected'})\n                    </label>\n                    {image && <button onClick={clearFile}>Clear</button>}\n                    <p><small>This image only gets used locally. No images ever reach our servers.</small></p>\n                </div>\n            </div>\n\n            <div>\n                <h2><FontAwesomeIcon icon={faCalendar}/> Count to datetime</h2>\n                <div className=\"datepicker\">\n                    <DatePicker\n                        selected={finishDate}\n                        onChange={date => setFinishDate(date ? date : finishDate)}\n                        shouldCloseOnSelect={false}\n                        showTimeSelect={true}\n                        timeIntervals={5}\n                        dateFormat=\"yyyy MMMM d, HH:mm\"\n                        // @ts-ignore\n                        customInput={<DatePickerInput/>}\n                    />\n                </div>\n                <button onClick={startCountToDate}>Start <FontAwesomeIcon icon={faPlaneDeparture}/></button>\n            </div>\n            <div>\n                <h2><FontAwesomeIcon icon={faHourglassStart}/> Countdown</h2>\n                <div>\n                    <TimeSpanPicker countdownTime={countdownTime} setCountdownTime={setCountdownTime}/>\n                </div>\n                <button onClick={startCountdown}>Start <FontAwesomeIcon icon={faRocket}/></button>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport timeFormatter from \"../lib/timeFormatter\";\nimport './Time.css';\nimport DateMillis from \"../types/DateMillis\";\n\ninterface Props {\n    time: DateMillis;\n}\n\nexport default function Time({ time }: Props) {\n    const strTimeObj = timeFormatter(time);\n    return (\n        <div className=\"clock\">\n            <div>\n                <span>{strTimeObj.days}</span>\n                <span>Days</span>\n            </div>\n            <div>\n                <span>{strTimeObj.hours}</span>\n                <span>Hours</span>\n            </div>\n            <div>\n                <span>{strTimeObj.minutes}</span>\n                <span>Minutes</span>\n            </div>\n            <div>\n                <span>{strTimeObj.seconds}</span>\n                <span>Seconds</span>\n            </div>\n        </div>\n    );\n}\n","import DateMillis from \"../types/DateMillis\";\nimport StrTimeObj from \"../types/StrTimeObj\";\nimport { convertToTimeObj } from \"./convertTimeObj\";\n\nexport default function timeFormatter(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: (timeObj.seconds < 10 ? '0' : '') + timeObj.seconds.toString(),\n        minutes: (timeObj.minutes < 10 ? '0' : '') + timeObj.minutes.toString(),\n        hours: (timeObj.hours < 10 ? '0' : '') + timeObj.hours.toString(),\n        days: (timeObj.days < 10 ? '0' : '') + timeObj.days.toString()\n    };\n}\n","// many thanks to overreacted:\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number | null) {\n    const savedCallback = useRef<() => void>();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current?.();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useRef } from \"react\";\nimport './InfoText.css';\nimport ContentEditable from \"react-contenteditable\";\n\ninterface Props {\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n    small?: boolean;\n    editable?: boolean;\n}\n\nexport default function InfoText({ infoText,setInfoText, small, editable }: Props) {\n    const text = useRef<string>(infoText || '');\n\n    const className = `${small && 'small'} infotext`;\n\n    return (\n        <ContentEditable className={className}\n                         html={text.current}\n                         disabled={!editable}\n                         onChange={event => text.current = event.target.value}\n                         onBlur={() => setInfoText && setInfoText(text.current)}\n                         tagName=\"h2\"\n        />\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport './Countdown.css';\nimport Time from \"../Time\";\nimport DateMillis from \"../../types/DateMillis\";\nimport useInterval from \"../../hooks/useInterval\";\nimport intervalRefreshRate from \"../../constants/intervalRefreshRate\";\nimport InfoText from \"./InfoText/InfoText\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPause, faPlay, faUndo } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n    countdownTime: DateMillis;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n}\n\nexport default function Countdown({ countdownTime, infoText, setInfoText }: Props) {\n    // time handling\n    const [remainingTime, setRemainingTime] = useState<DateMillis>(countdownTime);\n    const [endTime, setEndTime] = useState<DateMillis>(0);\n    // delay to update interval\n    const [delay, setDelay] = useState<number | null>(null);\n    // button states\n    const [startEnabled, setStartEnabled] = useState<boolean>(true);\n    const [stopEnabled, setStopEnabled] = useState<boolean>(false);\n\n    function updateRemainingTime() {\n        const currentTime = Date.now();\n        setRemainingTime(endTime - currentTime > 0 ?\n            endTime - currentTime :\n            0\n        );\n    }\n\n    // disable interval on finish\n    useEffect(() => {\n        if (remainingTime <= 0) setDelay(null);\n    }, [remainingTime]);\n\n    // set button states based on delay\n    useEffect(() => {\n        if (delay) {\n            setStartEnabled(false);\n            setStopEnabled(true);\n        } else {\n            setStartEnabled(remainingTime > 0);\n            setStopEnabled(false);\n        }\n    }, [delay, remainingTime]);\n\n    // calculate remaining time every delay if delay is not null\n    useInterval(updateRemainingTime, delay);\n\n    function startCountdown() {\n        if (remainingTime > 0) {\n            setEndTime(Date.now() + remainingTime);\n            setDelay(intervalRefreshRate);\n        }\n    }\n\n    function stopCountdown() {\n        setDelay(null);\n    }\n\n    function resetCountdown() {\n        setRemainingTime(() => {\n            stopCountdown();\n            return countdownTime;\n        });\n    }\n\n    return (\n        <>\n            <InfoText infoText={infoText} editable={true} setInfoText={setInfoText} />\n            <Time time={remainingTime} />\n            <div className=\"buttonbar\">\n                <button onClick={resetCountdown}><FontAwesomeIcon icon={faUndo} /></button>\n                <button onClick={stopCountdown} disabled={!stopEnabled}><FontAwesomeIcon icon={faPause} /></button>\n                <button onClick={startCountdown} disabled={!startEnabled}><FontAwesomeIcon icon={faPlay} /></button>\n            </div>\n        </>\n    );\n}\n","const intervalRefreshRate = 200; /* ms */\n\nexport default intervalRefreshRate;\n","import React, { useState } from \"react\";\n\nimport DateMillis from \"../types/DateMillis\";\nimport Time from \"./Time\";\nimport useInterval from \"../hooks/useInterval\";\nimport intervalRefreshRate from \"../constants/intervalRefreshRate\";\nimport InfoText from \"./Countdown/InfoText/InfoText\";\n\ninterface Props {\n    finishDate: Date;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n}\n\nexport default function CountToDate({ finishDate, infoText, setInfoText }: Props) {\n    const [deltaTime, setDeltaTime] = useState<DateMillis>(0);\n\n    useInterval(() => {\n        const difference = finishDate.valueOf() - Date.now().valueOf();\n        setDeltaTime(difference > 0 ? difference : 0);\n    }, intervalRefreshRate);\n\n    return (\n        <>\n            <InfoText editable={true} infoText={infoText} setInfoText={setInfoText} />\n            <p className=\"center\">{`Date: ${finishDate.toLocaleString()}`}</p>\n            <Time time={deltaTime} />\n        </>\n    );\n}\n","import {Dispatch, SetStateAction, useState} from 'react';\n\n/**\n * Use a state which gets saved in the localStorage\n * @param key the key for storing it in the localStorage\n * @param defaultValue the default value if no value was previously set\n */\nexport default function useStoredState<T>(key: string, defaultValue: T): [\n    T,\n    Dispatch<SetStateAction<T>>,\n] {\n    const storedValue = window.localStorage.getItem(key);\n    // Use previously stored value or, if nonexistent, the default value:\n    const initialValue = storedValue ?? JSON.stringify(defaultValue);\n\n    const [value, setValue] = useState<T>(JSON.parse(initialValue));\n\n    return [value, (newValue, ...args) => {\n        // Store new values in localStorage as well:\n        localStorage.setItem(key, JSON.stringify(newValue));\n        return setValue(newValue, ...args);\n    }]\n}\n","export function serializeDate(date: Date): string {\n    return date.toISOString();\n}\n\nexport function deserializeDate(date: string): Date {\n    return new Date(Date.parse(date));\n}\n","import React from 'react';\n\nimport './App.css';\nimport DateMillis from \"../types/DateMillis\";\nimport AppSettings from './AppSettings/AppSettings';\nimport Countdown from \"./Countdown/Countdown\";\nimport CountToDate from \"./CountToDate\";\nimport AppState from \"../types/AppState\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft, faGlobe, faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport FileObj from \"../types/FileObj\";\nimport useStoredState from \"../hooks/useStoredState\";\nimport useStoredDateState from \"../hooks/useStoredDateState\";\n\nconst defaultInfoText = 'Aerospace Technology';\n\n\nfunction App() {\n    // global app state\n    const [appState, setAppState] = useStoredState<AppState>('app-state', 'none');\n    // states for the different modes\n    const [finishDate, setFinishDate] = useStoredDateState('finish-date', new Date());\n    const [countdownTime, setCountdownTime] = useStoredState<DateMillis>('countdownTime',\n        15 * 60 * 1000);\n    const [infoText, setInfoText] = useStoredState<string>('infoText', defaultInfoText);\n    const [image, setImage] = useStoredState<FileObj | null>('image', null);\n\n    function backToSettings() {\n        setAppState('none');\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {appState === 'none' && (\n                    <>\n                        <h1 className=\"heading\"><FontAwesomeIcon icon={faStopwatch}/> Simple Timer</h1>\n                        <AppSettings\n                            finishDate={finishDate}\n                            countdownTime={countdownTime}\n                            setFinishDate={setFinishDate}\n                            setCountdownTime={setCountdownTime}\n                            setAppState={setAppState}\n                            infoText={infoText}\n                            setInfoText={setInfoText}\n                            setImage={setImage}\n                            image={image}\n                        />\n                    </>\n                )}\n\n                {appState !== 'none' && image && <img id=\"logo\" src={image.dataURI} alt={image.title} />}\n\n                {appState === 'countdown' && <Countdown\n                    countdownTime={countdownTime}\n                    infoText={infoText}\n                    setInfoText={setInfoText}\n                />}\n                {appState === 'countToDate' && <CountToDate\n                    finishDate={finishDate}\n                    infoText={infoText}\n                    setInfoText={setInfoText}\n                />}\n\n                {appState !== 'none' && <button\n                    className=\"back\"\n                    onClick={backToSettings}\n                >\n                    <FontAwesomeIcon icon={faChevronLeft}/> Back\n                </button>}\n            </header>\n            <footer>\n                <div className=\"smlinks\">\n                    <a className=\"iconlink\"\n                       href=\"https://github.com/fliegwerk/simple-timer/\"\n                       target=\"_blank\"\n                       rel=\"noopener noreferrer\">\n                        <FontAwesomeIcon icon={faGithub}/>\n                    </a>\n                    <a className=\"iconlink\"\n                       href=\"https://fliegwerk.com/\"\n                       target=\"_blank\"\n                       rel=\"noopener noreferrer\">\n                        <FontAwesomeIcon icon={faGlobe}/>\n                    </a>\n                </div>\n                <p className=\"center\">\n                    Simple Timer by fliegwerk&nbsp;|&nbsp;\n                    <a href=\"https://www.fliegwerk.com/legal\" target=\"_blank\" rel=\"noopener noreferrer\">Legal Notice</a>\n                </p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import {Dispatch} from 'react';\nimport useStoredState from \"./useStoredState\";\nimport {deserializeDate, serializeDate} from \"../lib/serialize-date\";\n\n/**\n * Use a state which gets saved in the localStorage\n * @param key the key for storing it in the localStorage\n * @param defaultValue the default value if no value was previously set\n */\nexport default function useStoredDateState(key: string, defaultValue: Date): [\n    Date,\n    Dispatch<Date>,\n] {\n    const [value, setValue] = useStoredState<string>(key, serializeDate(defaultValue));\n\n    return [deserializeDate(value), (value, ...args) => {\n        return setValue(serializeDate(value), ...args);\n    }];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}