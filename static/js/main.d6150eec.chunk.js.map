{"version":3,"sources":["lib/convertTimeObj.ts","components/AppSettings/TimeSpanPicker/TimeSpanPicker.tsx","components/AppSettings/DatePickerInput/DatePickerInput.tsx","components/AppSettings/AppSettings.tsx","components/Time.tsx","lib/timeFormatter.ts","hooks/useInterval.ts","components/Countdown/InfoText/InfoText.tsx","components/Countdown/Countdown.tsx","constants/intervalRefreshRate.ts","components/CountToDate.tsx","hooks/useStoredState.ts","lib/serialize-date.ts","hooks/useThemeManager.ts","components/DarkModeToggler.tsx","components/App.tsx","hooks/useStoredDateState.ts","serviceWorker.ts","index.tsx"],"names":["convertToTimeObj","dateMillis","seconds","Math","floor","minutes","hours","days","formDefinition","id","label","TimeSpanPicker","countdownTime","setCountdownTime","useState","timeObj","toString","convertToStrTimeObj","inputState","setInputState","onChange","event","target","value","newState","JSON","parse","stringify","Number","parseInt","strTimeObj","convertToDateMillis","className","map","elem","key","htmlFor","type","name","DatePickerInput","onClick","AppSettings","finishDate","setFinishDate","setAppState","infoText","setInfoText","setImage","image","text","useRef","icon","faParagraph","html","current","onBlur","tagName","faImage","selectedFile","files","reader","FileReader","onload","result","dataURI","title","readAsDataURL","faFolderOpen","console","log","faCalendar","selected","date","shouldCloseOnSelect","showTimeSelect","timeIntervals","dateFormat","customInput","faPlaneDeparture","faHourglassStart","faRocket","Time","timeFormatter","time","useInterval","callback","delay","savedCallback","useEffect","setInterval","clearInterval","InfoText","small","editable","disabled","Countdown","remainingTime","setRemainingTime","endTime","setEndTime","setDelay","startEnabled","setStartEnabled","stopEnabled","setStopEnabled","stopCountdown","currentTime","Date","now","faUndo","faPause","faPlay","CountToDate","deltaTime","setDeltaTime","difference","valueOf","toLocaleString","useStoredState","defaultValue","storedValue","window","localStorage","getItem","initialValue","setValue","newValue","setItem","args","serializeDate","toISOString","dark_default","bg","accent","fg","fg_dim","gray","light_default","DarkModeToggle","props","setTheme","theme","document","documentElement","style","setProperty","enableTheme","useThemeManager","autoSetTheme","useCallback","isElectron","darkMode","matchMedia","matches","addEventListener","removeEventListener","children","App","appState","useStoredDateState","faStopwatch","src","alt","faChevronLeft","href","rel","faGithub","faGlobe","packageVersion","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6150eec.chunk.js","sourcesContent":["import StrTimeObj from \"../types/StrTimeObj\";\nimport DateMillis from \"../types/DateMillis\";\nimport TimeObj from \"../types/TimeObj\";\n\nfunction convertToTimeObj(dateMillis: DateMillis): TimeObj {\n    const seconds = Math.floor(dateMillis / 1000) % 60;\n    const minutes = Math.floor(dateMillis / (60 * 1000)) % 60;\n    const hours = Math.floor(dateMillis / (60 * 60 * 1000)) % 24;\n    const days = Math.floor(dateMillis / (24 * 60 * 60 * 1000));\n\n    return { seconds, minutes, hours, days };\n}\n\nfunction convertToStrTimeObj(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: timeObj.seconds.toString(),\n        minutes: timeObj.minutes.toString(),\n        hours: timeObj.hours.toString(),\n        days: timeObj.days.toString()\n    };\n}\n\nfunction convertToDateMillis(strTimeObj: StrTimeObj): DateMillis {\n    const seconds = parseInt(strTimeObj.seconds) || 0;\n    const minutes = parseInt(strTimeObj.minutes) || 0;\n    const hours = parseInt(strTimeObj.hours) || 0;\n    const days = parseInt(strTimeObj.days) || 0;\n\n    return (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000;\n}\n\nexport {\n    convertToStrTimeObj,\n    convertToTimeObj,\n    convertToDateMillis,\n};\n","import React, { useState } from \"react\";\n\nimport './TimeSpanPicker.css';\nimport '../DatePickerInput/DatePickerInput.css';\nimport StrTimeObj from \"../../../types/StrTimeObj\";\nimport { convertToDateMillis, convertToStrTimeObj } from \"../../../lib/convertTimeObj\";\nimport DateMillis from \"../../../types/DateMillis\";\n\ntype FormElement = {\n    id: keyof StrTimeObj;\n    label: string;\n}\n\nconst formDefinition: FormElement[] = [\n    {\n        id: 'days',\n        label: 'Days:'\n    },\n    {\n        id: 'hours',\n        label: 'Hours:'\n    },\n    {\n        id: 'minutes',\n        label: 'Minutes:'\n    },\n    {\n        id: 'seconds',\n        label: 'Seconds:'\n    }\n];\n\ninterface Props {\n    countdownTime: DateMillis;\n    setCountdownTime: (dateMillis: DateMillis) => void;\n}\n\nexport default function TimeSpanPicker({ countdownTime, setCountdownTime }: Props) {\n    const [inputState, setInputState] = useState<StrTimeObj>(convertToStrTimeObj(countdownTime));\n\n    function onChange(event: React.FocusEvent<HTMLInputElement>) {\n        const { value, id } = event.target;\n\n        const newState = {...JSON.parse(JSON.stringify(inputState))}; // Clone previous state object\n        newState[id] = Number.parseInt(value);\n\n        setInputState(newState);\n        setCountdownTime(convertToDateMillis(newState));\n    }\n\n    return (\n        <form className=\"form\">\n            {formDefinition.map(elem => (\n                <div key={elem.id}>\n                    <label htmlFor={elem.id}>{elem.label}</label>\n                    <input className=\"input\"\n                           type=\"number\"\n                           id={elem.id}\n                           name={elem.id}\n                           value={inputState[elem.id]}\n                           onChange={onChange}\n                    />\n                </div>\n            ))}\n        </form>\n    );\n}\n","import React from \"react\";\n\nimport './DatePickerInput.css';\n\ninterface Props {\n    value: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport default function DatePickerInput({ value, onClick }: Props) {\n    return <button className=\"input\" onClick={onClick}>{value}</button>\n}\n","import React, {useRef} from \"react\";\nimport DatePicker from 'react-datepicker';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faParagraph,\n    faCalendar,\n    faHourglassStart,\n    faPlaneDeparture,\n    faRocket, faImage, faFolderOpen\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport './AppSettings.css';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport AppState from \"../../types/AppState\";\nimport TimeSpanPicker from \"./TimeSpanPicker/TimeSpanPicker\";\nimport DateMillis from \"../../types/DateMillis\";\nimport DatePickerInput from \"./DatePickerInput/DatePickerInput\";\nimport ContentEditable from \"react-contenteditable\";\nimport FileObj from \"../../types/FileObj\";\n\ninterface Props {\n    finishDate: Date;\n    setFinishDate: (newDate: Date) => void;\n    countdownTime: DateMillis;\n    setCountdownTime: (newTime: DateMillis) => void;\n    setAppState: (newState: AppState) => void;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n    setImage: (newImage: FileObj | null) => void;\n    image: FileObj | null;\n}\n\nexport default function AppSettings(\n    {finishDate, countdownTime, setFinishDate, setCountdownTime, setAppState, infoText, setInfoText, setImage, image}: Props\n) {\n    const text = useRef<string>(infoText || '');\n\n    function startCountToDate() {\n        setAppState('countToDate');\n    }\n\n    function startCountdown() {\n        setAppState('countdown');\n    }\n\n    function onFileSelected(event: React.ChangeEvent<HTMLInputElement>) {\n        const selectedFile = (event.target.files || [])[0];\n        const reader = new FileReader();\n\n        // register setImage\n        reader.onload = event => {\n            event && event.target && event.target.result && setImage({\n                dataURI: event.target.result.toString(),\n                title: selectedFile.name\n            });\n        };\n\n        reader.readAsDataURL(selectedFile);\n    }\n\n    function clearFile() {\n        console.log('Clear image');\n        setImage(null);\n    }\n\n    // noinspection RequiredAttributes\n    return (\n        <div className=\"container\">\n            <div>\n                <h2><FontAwesomeIcon icon={faParagraph}/> Title</h2>\n                <div>\n                    <ContentEditable className=\"textarea\"\n                                     html={text.current}\n                                     onChange={event => text.current = event.target.value}\n                                     onBlur={() => setInfoText && setInfoText(text.current)}\n                                     tagName=\"div\"\n                    />\n                </div>\n            </div>\n\n            <div>\n                <h2><FontAwesomeIcon icon={faImage}/> Image</h2>\n                <div>\n                    <input id=\"inputImage\" type=\"file\" onChange={onFileSelected}/>\n                    <label className=\"textarea\" htmlFor=\"inputImage\">\n                        <FontAwesomeIcon icon={faFolderOpen}/> Select file ({image ? image.title : 'none selected'})\n                    </label>\n                    {image && <button onClick={clearFile}>Clear</button>}\n                    <p><small>This image only gets used locally. No images ever reach our servers.</small></p>\n                </div>\n            </div>\n\n            <div>\n                <h2><FontAwesomeIcon icon={faCalendar}/> Count to datetime</h2>\n                <div className=\"datepicker\">\n                    <DatePicker\n                        selected={finishDate}\n                        onChange={date => setFinishDate(date ? date : finishDate)}\n                        shouldCloseOnSelect={false}\n                        showTimeSelect={true}\n                        timeIntervals={5}\n                        dateFormat=\"yyyy MMMM d, HH:mm\"\n                        // @ts-ignore\n                        customInput={<DatePickerInput/>}\n                    />\n                </div>\n                <button onClick={startCountToDate}>Start <FontAwesomeIcon icon={faPlaneDeparture}/></button>\n            </div>\n            <div>\n                <h2><FontAwesomeIcon icon={faHourglassStart}/> Countdown</h2>\n                <div>\n                    <TimeSpanPicker countdownTime={countdownTime} setCountdownTime={setCountdownTime}/>\n                </div>\n                <button onClick={startCountdown}>Start <FontAwesomeIcon icon={faRocket}/></button>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport timeFormatter from \"../lib/timeFormatter\";\nimport './Time.css';\nimport DateMillis from \"../types/DateMillis\";\n\ninterface Props {\n    time: DateMillis;\n}\n\nexport default function Time({ time }: Props) {\n    const strTimeObj = timeFormatter(time);\n    return (\n        <div className=\"clock\">\n            <div className=\"time-container time-days\">\n                <span className=\"time-value time-days-value\">{strTimeObj.days}</span>\n                <span className=\"time-label time-days-label\">Days</span>\n            </div>\n            <div className=\"time-container time-hours\">\n                <span className=\"time-value time-hours-value\">{strTimeObj.hours}</span>\n                <span className=\"time-label time-hours-label\">Hours</span>\n            </div>\n            <div className=\"time-container time-minutes\">\n                <span className=\"time-value time-minutes-value\">{strTimeObj.minutes}</span>\n                <span className=\"time-label time-minutes-label\">Minutes</span>\n            </div>\n            <div className=\"time-container time-seconds\">\n                <span className=\"time-value time-seconds-value\">{strTimeObj.seconds}</span>\n                <span className=\"time-label time-seconds-label\">Seconds</span>\n            </div>\n        </div>\n    );\n}\n","import DateMillis from \"../types/DateMillis\";\nimport StrTimeObj from \"../types/StrTimeObj\";\nimport { convertToTimeObj } from \"./convertTimeObj\";\n\nexport default function timeFormatter(dateMillis: DateMillis): StrTimeObj {\n    const timeObj = convertToTimeObj(dateMillis);\n    return {\n        seconds: (timeObj.seconds < 10 ? '0' : '') + timeObj.seconds.toString(),\n        minutes: (timeObj.minutes < 10 ? '0' : '') + timeObj.minutes.toString(),\n        hours: (timeObj.hours < 10 ? '0' : '') + timeObj.hours.toString(),\n        days: (timeObj.days < 10 ? '0' : '') + timeObj.days.toString()\n    };\n}\n","// many thanks to overreacted:\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number | null) {\n    const savedCallback = useRef<() => void>();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current?.();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useRef } from \"react\";\nimport './InfoText.css';\nimport ContentEditable from \"react-contenteditable\";\n\ninterface Props {\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n    small?: boolean;\n    editable?: boolean;\n}\n\nexport default function InfoText({ infoText,setInfoText, small, editable }: Props) {\n    const text = useRef<string>(infoText || '');\n\n    const className = `${small && 'small'} infotext`;\n\n    return (\n        <ContentEditable className={className}\n                         html={text.current}\n                         disabled={!editable}\n                         onChange={event => text.current = event.target.value}\n                         onBlur={() => setInfoText && setInfoText(text.current)}\n                         tagName=\"h2\"\n        />\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport './Countdown.css';\nimport Time from \"../Time\";\nimport DateMillis from \"../../types/DateMillis\";\nimport useInterval from \"../../hooks/useInterval\";\nimport intervalRefreshRate from \"../../constants/intervalRefreshRate\";\nimport InfoText from \"./InfoText/InfoText\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPause, faPlay, faUndo } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n    countdownTime: DateMillis;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n}\n\nexport default function Countdown({ countdownTime, infoText, setInfoText }: Props) {\n    // time handling\n    const [remainingTime, setRemainingTime] = useState<DateMillis>(countdownTime);\n    const [endTime, setEndTime] = useState<DateMillis>(0);\n    // delay to update interval\n    const [delay, setDelay] = useState<number | null>(null);\n    // button states\n    const [startEnabled, setStartEnabled] = useState<boolean>(true);\n    const [stopEnabled, setStopEnabled] = useState<boolean>(false);\n\n    function updateRemainingTime() {\n        const currentTime = Date.now();\n        setRemainingTime(endTime - currentTime > 0 ?\n            endTime - currentTime :\n            0\n        );\n    }\n\n    // disable interval on finish\n    useEffect(() => {\n        if (remainingTime <= 0) setDelay(null);\n    }, [remainingTime]);\n\n    // set button states based on delay\n    useEffect(() => {\n        if (delay) {\n            setStartEnabled(false);\n            setStopEnabled(true);\n        } else {\n            setStartEnabled(remainingTime > 0);\n            setStopEnabled(false);\n        }\n    }, [delay, remainingTime]);\n\n    // calculate remaining time every delay if delay is not null\n    useInterval(updateRemainingTime, delay);\n\n    function startCountdown() {\n        if (remainingTime > 0) {\n            setEndTime(Date.now() + remainingTime);\n            setDelay(intervalRefreshRate);\n        }\n    }\n\n    function stopCountdown() {\n        setDelay(null);\n    }\n\n    function resetCountdown() {\n        setRemainingTime(() => {\n            stopCountdown();\n            return countdownTime;\n        });\n    }\n\n    return (\n        <>\n            <InfoText infoText={infoText} editable={true} setInfoText={setInfoText} />\n            <Time time={remainingTime} />\n            <div className=\"buttonbar\">\n                <button onClick={resetCountdown}><FontAwesomeIcon icon={faUndo} /></button>\n                <button onClick={stopCountdown} disabled={!stopEnabled}><FontAwesomeIcon icon={faPause} /></button>\n                <button onClick={startCountdown} disabled={!startEnabled}><FontAwesomeIcon icon={faPlay} /></button>\n            </div>\n        </>\n    );\n}\n","const intervalRefreshRate = 200; /* ms */\n\nexport default intervalRefreshRate;\n","import React, { useState } from \"react\";\n\nimport DateMillis from \"../types/DateMillis\";\nimport Time from \"./Time\";\nimport useInterval from \"../hooks/useInterval\";\nimport intervalRefreshRate from \"../constants/intervalRefreshRate\";\nimport InfoText from \"./Countdown/InfoText/InfoText\";\n\ninterface Props {\n    finishDate: Date;\n    infoText?: string;\n    setInfoText?: (newText: string) => void;\n}\n\nexport default function CountToDate({ finishDate, infoText, setInfoText }: Props) {\n    const [deltaTime, setDeltaTime] = useState<DateMillis>(0);\n\n    useInterval(() => {\n        const difference = finishDate.valueOf() - Date.now().valueOf();\n        setDeltaTime(difference > 0 ? difference : 0);\n    }, intervalRefreshRate);\n\n    return (\n        <>\n            <InfoText editable={true} infoText={infoText} setInfoText={setInfoText} />\n            <p className=\"center\">{`Date: ${finishDate.toLocaleString()}`}</p>\n            <Time time={deltaTime} />\n        </>\n    );\n}\n","import {Dispatch, SetStateAction, useState} from 'react';\n\n/**\n * Use a state which gets saved in the localStorage\n * @param key the key for storing it in the localStorage\n * @param defaultValue the default value if no value was previously set\n */\nexport default function useStoredState<T>(key: string, defaultValue: T): [\n    T,\n    Dispatch<SetStateAction<T>>,\n] {\n    const storedValue = window.localStorage.getItem(key);\n    // Use previously stored value or, if nonexistent, the default value:\n    const initialValue = storedValue ?? JSON.stringify(defaultValue);\n\n    const [value, setValue] = useState<T>(JSON.parse(initialValue));\n\n    return [value, (newValue, ...args) => {\n        // Store new values in localStorage as well:\n        localStorage.setItem(key, JSON.stringify(newValue));\n        return setValue(newValue, ...args);\n    }]\n}\n","export function serializeDate(date: Date): string {\n    return date.toISOString();\n}\n\nexport function deserializeDate(date: string): Date {\n    return new Date(Date.parse(date));\n}\n","import useStoredState from \"./useStoredState\";\n\nexport interface Theme {\n    bg: string;\n    fg: string;\n    fg_dim: string;\n    gray: string;\n    accent: string;\n}\n\nexport const dark_default: Theme = {\n    bg: '#151515',\n    accent: '#a35212',\n    fg: '#ffffff',\n    fg_dim: '#b3b3b3',\n    gray: '#4e4e4e'\n}\n\nexport const light_default = {\n    bg: 'white',\n    fg_dim: '#888',\n    gray: '#eee',\n    accent: 'powderblue',\n    fg: '#222'\n}\n\nexport default function useThemeManager() {\n   const [theme, setTheme] = useStoredState<Theme>('theme', dark_default);\n\n    function enableTheme(theme: Theme) {\n        document.documentElement.style.setProperty('--bg', theme.bg);\n        document.documentElement.style.setProperty('--fg', theme.fg);\n        document.documentElement.style.setProperty('--fg-dim', theme.fg_dim);\n        document.documentElement.style.setProperty('--gray', theme.gray);\n        document.documentElement.style.setProperty('--accent', theme.accent);\n    }\n\n    enableTheme(theme);\n\n    return (theme: Theme) => {\n        setTheme(theme);\n    }\n}\n","import React, {useCallback, useEffect} from \"react\";\nimport useThemeManager, {dark_default, light_default} from \"../hooks/useThemeManager\";\nimport isElectron from \"is-electron\";\n\ninterface Props {\n    children?: any;\n}\n\nexport default function DarkModeToggle(props: Props) {\n    const setTheme = useThemeManager();\n\n    const autoSetTheme = useCallback(() => {\n        if (isElectron()) {\n            const darkMode = (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches)\n            setTheme(darkMode ? dark_default : light_default);\n        }\n    }, [setTheme])\n\n\n    useEffect(() => {\n        autoSetTheme();\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', autoSetTheme);\n\n        return () => {\n            window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', autoSetTheme);\n        };\n    }, [autoSetTheme])\n\n    return <>\n        {props.children}\n    </>\n}\n","import React from 'react';\n\nimport './App.css';\nimport DateMillis from \"../types/DateMillis\";\nimport AppSettings from './AppSettings/AppSettings';\nimport Countdown from \"./Countdown/Countdown\";\nimport CountToDate from \"./CountToDate\";\nimport AppState from \"../types/AppState\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronLeft, faGlobe, faStopwatch} from \"@fortawesome/free-solid-svg-icons\";\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons\";\nimport FileObj from \"../types/FileObj\";\nimport useStoredState from \"../hooks/useStoredState\";\nimport useStoredDateState from \"../hooks/useStoredDateState\";\nimport {version as packageVersion} from \"../../package.json\";\nimport DarkModeToggle from \"./DarkModeToggler\";\n\nconst defaultInfoText = 'Aerospace Technology';\n\n\nfunction App() {\n    // global app state\n    const [appState, setAppState] = useStoredState<AppState>('app-state', 'none');\n    // states for the different modes\n    const [finishDate, setFinishDate] = useStoredDateState('finish-date', new Date());\n    const [countdownTime, setCountdownTime] = useStoredState<DateMillis>('countdownTime',\n        15 * 60 * 1000);\n    const [infoText, setInfoText] = useStoredState<string>('infoText', defaultInfoText);\n    const [image, setImage] = useStoredState<FileObj | null>('image', null);\n\n    function backToSettings() {\n        setAppState('none');\n    }\n\n    return (\n        <DarkModeToggle>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {appState === 'none' && (\n                        <>\n                            <h1 className=\"heading\"><FontAwesomeIcon icon={faStopwatch}/> Simple Timer</h1>\n                            <AppSettings\n                                finishDate={finishDate}\n                                countdownTime={countdownTime}\n                                setFinishDate={setFinishDate}\n                                setCountdownTime={setCountdownTime}\n                                setAppState={setAppState}\n                                infoText={infoText}\n                                setInfoText={setInfoText}\n                                setImage={setImage}\n                                image={image}\n                            />\n                        </>\n                    )}\n\n                    {appState !== 'none' && image && <img id=\"logo\" src={image.dataURI} alt={image.title}/>}\n\n                    {appState === 'countdown' && <Countdown\n                        countdownTime={countdownTime}\n                        infoText={infoText}\n                        setInfoText={setInfoText}\n                    />}\n                    {appState === 'countToDate' && <CountToDate\n                        finishDate={finishDate}\n                        infoText={infoText}\n                        setInfoText={setInfoText}\n                    />}\n\n                    {appState !== 'none' && <button\n                        className=\"back\"\n                        onClick={backToSettings}\n                    >\n                        <FontAwesomeIcon icon={faChevronLeft}/> Back\n                    </button>}\n                </header>\n                <footer>\n                    <div className=\"smlinks\">\n                        <a className=\"iconlink\"\n                           href=\"https://github.com/fliegwerk/simple-timer/\"\n                           target=\"_blank\"\n                           rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon icon={faGithub}/>\n                        </a>\n                        <a className=\"iconlink\"\n                           href=\"https://fliegwerk.com/\"\n                           target=\"_blank\"\n                           rel=\"noopener noreferrer\">\n                            <FontAwesomeIcon icon={faGlobe}/>\n                        </a>\n                    </div>\n                    <p className=\"center\">\n                        Simple Timer v{packageVersion} by fliegwerk&nbsp;|&nbsp;\n                        <a href=\"https://www.fliegwerk.com/legal\" target=\"_blank\" rel=\"noopener noreferrer\">Legal\n                            Notice</a>\n                    </p>\n                </footer>\n            </div>\n        </DarkModeToggle>\n    );\n}\n\nexport default App;\n","import {Dispatch} from 'react';\nimport useStoredState from \"./useStoredState\";\nimport {deserializeDate, serializeDate} from \"../lib/serialize-date\";\n\n/**\n * Use a state which gets saved in the localStorage\n * @param key the key for storing it in the localStorage\n * @param defaultValue the default value if no value was previously set\n */\nexport default function useStoredDateState(key: string, defaultValue: Date): [\n    Date,\n    Dispatch<Date>,\n] {\n    const [value, setValue] = useStoredState<string>(key, serializeDate(defaultValue));\n\n    return [deserializeDate(value), (value, ...args) => {\n        return setValue(serializeDate(value), ...args);\n    }];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport isElectron from 'is-electron';\n\nReactDOM.render(\n    <React.StrictMode>\n        <div className={isElectron() ? 'electron' : 'web'}>\n            <App/>\n        </div>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}